pipeline {
    agent {
	    label 'Slave_Induccion'
	 }
	 options {
	    buildDiscarder(logRotator(numToKeepStr: '3'))
	    disableConcurrentBuilds()
	 }
	 tools {
	    jdk 'JDK8_Centos'
	    gradle 'Gradle4.5_Centos'
	 }
	 stages{
	    stage('SpringBoot Checkout'){
	        steps{
	            echo "------------>SpringBoot Checkout<------------"
	            checkout([$class: 'GitSCM', branches: [[name: '*/develop']],
	            doGenerateSubmoduleConfigurations: false, extensions: [], gitTool:
	            'Git_Centos', submoduleCfg: [], userRemoteConfigs: [[credentialsId:
	            'GitHub_pedrog31', url:
	            'https://github.com/pedrog31/Ceiba-parqueadero']]])
	            sh 'gradle clean'
	        }
	    }        
	    stage('SpringBoot Unit Tests') {
	        steps{
	            echo "------------>SpringBoot Unit Tests<------------"
	            sh 'gradle --b ./build.gradle test'
	        }
	    }
	    stage('SpringBoot Integration Tests') {
	        steps {
	            echo "------------>SpringBoot Integration Tests<------------"
	        }
	    }
	    stage('SpringBoot Static Code Analysis') {
	        steps{
	            echo "------------>SpringBoot Static Code Analysiss<------------"
	            withSonarQubeEnv('Sonar') {
	                sh """${tool name: '''SonarScanner''',
	                type:$/hudson.plugins.sonar.SonarRunnerInstallation/$}/bin/sonar-scanner"""
	            }
	        }
	    }
	    stage('SpringBoot Build') {
	        steps {
	            echo "------------>SpringBoot Build<------------"
	            sh 'gradle --b ./build.gradle build -x test'
	        }
	    }
	 }
	 post {
	    always {
	    	echo 'This will always run'
	    }
	    success {
	        echo 'This will run only if successful'
	        junit '**/build/test-results/test/*.xml'
	    }
	    failure {
	        echo 'This will run only if failed'
	        mail (
	                to: """pedro.gallego@ceiba.com.co""",
	                subject: '''Failed Pipeline:${currentBuild.fullDisplayName}''',
	                body: $/Something is wrong with ${env.BUILD_URL}/$
	            )
	    }
	    unstable {
	    	echo 'This will run only if the run was marked as unstable'
	    }
	    changed {
	    	echo 'This will run only if the state of the Pipeline has changed'
	    	echo 'For example, if the Pipeline was previously failing but is now successful'
	    }
	 }
}